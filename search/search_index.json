{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#rajivs-programming-notes","title":"Rajiv's Programming Notes","text":"<p>Collection of short snippets, notes and TILs about things related to Programming Languages, Linux, etc. Can also be called my second brain owing to my gold-fish memory.</p>"},{"location":"Docker/Reading%20material/","title":"Reading material","text":"<ul> <li>Learn Docker: Container training</li> </ul>"},{"location":"Docker/shell%20functions/","title":"Shell functions","text":""},{"location":"Docker/shell%20functions/#docker-history-of-layers","title":"Docker history of layers","text":"<pre><code>docker history --human --format \"{{.CreatedBy}}: {{.Size}}\" &lt;container name&gt;\n</code></pre>"},{"location":"Golang/Decode%20JSON%20with%20proper%20types/","title":"Decode JSON with proper types","text":"<p>I had to unmarshall a <code>POST</code> body JSON payload into a <code>struct</code> but the payload had all fields as <code>string</code> and I wanted to have proper data types for the keys.</p> <p>This is how the <code>payload</code> looked like:</p> <pre><code>{\n\"bufsize\": \"512\",\n\"class\": \"IN\",\n\"do\": \"false\",\n\"duration\": \"0.000072844\",\n\"id\": \"33531\",\n\"level\": \"INFO\",\n\"name\": \"mrkaran.dev.\",\n\"proto\": \"udp\",\n\"rcode\": \"NOERROR\",\n\"rflags\": \"qr,aa,rd,ra\",\n\"rsize\": \"83\",\n\"server_addr\": \"127.0.0.1\",\n\"server_port\": \"53256\",\n\"size\": \"29\",\n\"type\": \"A\"\n}\n</code></pre> <p>Some of the fields like <code>bufsize</code>, <code>size</code>, <code>id</code> should be of type <code>int32</code>. To decode these <code>string</code> fields into the types defined in struct, we can use <code>json:\",string\"</code>.</p> <p>This is how the <code>struct</code> looks:</p> <pre><code>type Log struct {\nBufSize    int     `json:\"bufsize,string\"`\nClass      string  `json:\"class\"`\nDO         bool    `json:\"do,string\"`\nDuration   float64 `json:\"duration,string\"`\nID         int     `json:\"id,string\"`\nLevel      string  `json:\"level\"`\nName       string  `json:\"name\"`\nProto      string  `json:\"proto\"`\nRCode      string  `json:\"rcode\"`\nRFlags     string  `json:\"rflags\"`\nRSize      int     `json:\"rsize,string\"`\nServerAddr string  `json:\"server_addr\"`\nSererPort  int     `json:\"server_port,string\"`\nSize       int     `json:\"size,string\"`\nType       string  `json:\"type\"`\n}\n</code></pre> <p>Quoting from the docs:</p> <p>The \"string\" option signals that a field is stored as JSON inside a JSON-encoded string. It applies only to fields of string, floating point, integer, or boolean types. This extra level of encoding is sometimes used when communicating with JavaScript programs:</p>"},{"location":"Golang/Gotchas/","title":"Gotchas","text":""},{"location":"Golang/Gotchas/#http-responses","title":"HTTP Responses","text":"<p>If you've a <code>http.ResponseWriter</code> object and using it to directly write the response to the connection, the order in which you write different parts of response is very important:</p> <pre><code>// First write headers.\nwr.Header().Set(\"Content-Type\", \"text/plain; version=0.0.4\")\n// Then set the status code. And yes, this is the function name for setting status code!\nwr.WriteHeader(http.StatusOK)\n// Then finally write the response body.\nwr.Write([]byte(\"hello world\"))\n</code></pre> <p>[!note] - Headers should be written first. If any extra header is set after calling <code>WriteHeader</code> it's a no-op. - Body should be after <code>WriteHeader</code>. Else it's a no-op.</p>"},{"location":"Golang/Inspect%20HTTP%20Headers/","title":"Inspect HTTP Headers","text":"<p>The following snippet is used to create a mini HTTP server to dump all HTTP headers of an incoming request which can be useful for debugging.</p> <pre><code>package main  import (  \"fmt\"  \"log\"  \"net/http\"  \"net/http/httputil\"  )  func index(w http.ResponseWriter, req *http.Request) {  // Save a copy of this request for debugging.  \nrequestDump, err := httputil.DumpRequest(req, true)  if err != nil {  fmt.Println(err)  fmt.Fprintf(w, \"oops! check logs\\n\")  return  }  fmt.Fprintf(w, \"%v\", string(requestDump))  }  func ping(w http.ResponseWriter, req *http.Request) {  fmt.Fprintf(w, \"pong\\n\")  }  func main() {  http.HandleFunc(\"/\", index)  http.HandleFunc(\"/ping\", ping)  port := \":6666\"  log.Printf(\"starting server at %s\", port)  http.ListenAndServe(port, nil)  }\n</code></pre>"},{"location":"Golang/Open%20File%20Descriptors/","title":"Open File Descriptors","text":"<p>I wanted a quick way to test if <code>ulimit -n</code> (max number of open files per process) works or not.</p> <p>This Go snippet creates <code>n</code>  files and opens them. It prints the underlyng File Descriptor ID but doesn't close the file handle. This way we can test the max number of open files this Go program can ever create:</p>"},{"location":"Golang/Open%20File%20Descriptors/#running","title":"Running","text":"<pre><code>package main\n\nimport (\n\"fmt\"\n\"os\"\n)\n\nvar (\nFILES_TO_OPEN = 99999\n)\n\nfunc main() {\nfmt.Println(\"writing\")\nfor i := 1; i &lt; FILES_TO_OPEN; i++ {\nfdF, err := os.Create(fmt.Sprintf(\"/tmp/fd_go%d.txt\", i))\nif err != nil {\npanic(err)\n}\n_, err = fdF.Write([]byte(\"a\"))\nif err != nil {\npanic(err)\n}\nfdF.Close()\n}\nfmt.Println(\"opening\")\nfor i := 1; i &lt; FILES_TO_OPEN; i++ {\nfdF, err := os.Open(fmt.Sprintf(\"/tmp/fd_go%d.txt\", i))\nif err != nil {\npanic(err)\n}\nfmt.Println(fdF.Fd())\n}\n}\n</code></pre>"},{"location":"Golang/Open%20File%20Descriptors/#exceeding-the-limit","title":"Exceeding the Limit","text":"<p>If you exceed the limit, it'll give an error like:</p> <pre><code>1018\n1019\n1020\n1021\n1022\n1023\npanic: open /tmp/fd_go1018.txt: too many open files\n\ngoroutine 1 [running]:\nmain.main()\n/home/karan/Code/Infra/fd-test/main.go:29 +0x286\nexit status 2\n</code></pre> <p>In my host <code>ulimit -n</code> was set to <code>1024</code>, so it failed to create more files than that.</p>"},{"location":"Golang/Open%20File%20Descriptors/#python-version","title":"Python Version","text":"<p>See Python/Open File Descriptors</p>"},{"location":"Golang/Profile%20Golang%20Applications/","title":"Profile Golang Applications","text":""},{"location":"Golang/Profile%20Golang%20Applications/#creating-a-profile","title":"Creating a profile","text":"<p>To profile Golang applications, <code>pprof</code> package is widely used. There's a nice wrapper around it https://github.com/pkg/profile which allows you to just drop one line in your application and start generating profiles:</p> <pre><code>package main\n\nfunc main() {\n\ndefer profile.Start(profile.ProfilePath(\".\"), profile.NoShutdownHook).Stop()\n\n// rest of your application\n}\n</code></pre> <ul> <li><code>profile.NoShutdownHook</code>: This is important to pass to <code>profile.Start</code> if you're shutting down your application with a SIGINT/SIGTERM and not handling profile storage directly. This will ensure the <code>.pprof</code> file gets saved correctly.</li> </ul>"},{"location":"Golang/Profile%20Golang%20Applications/#visualizing","title":"Visualizing","text":"<p><code>go tool pprof -http=\":8000\" ./cpu.pprof</code></p> <p>This allows you to visualize the <code>pprof</code> file in Graphviz and the more helpful Flamegraph visualizations.</p>"},{"location":"Golang/Update%20Golang%20Version/","title":"Update Golang Version","text":"<p>The below shell script is helpful to grab a specific Go version and update it locally.</p> <p>To use it you can tweak the following variables:</p> <ul> <li><code>VERSION</code></li> <li><code>PLATFORM</code></li> </ul> <pre><code>#! /bin/bash\nset -euf -o pipefail\n\n# Download latest Golang release for AMD64\n# https://golang.org/dl/\n\nVERSION=1.16\nPLATFORM=linux-amd64\n\n# Download Go\ncd `mktemp -d`\necho \"Downloading Go version ${VERSION}...\"\ncurl -sL -o go${VERSION}.${PLATFORM}.tar.gz https://golang.org/dl/go${VERSION}.${PLATFORM}.tar.gz\n\n# Remove old Go\necho \"Removing old Go version\"\nsudo rm -rf /usr/local/go\n\n# Install new Go\nsudo tar -C /usr/local -xzf go\"${VERSION}\".${PLATFORM}.tar.gz\necho \"Creating the skeleton for your local users go directory...\"\nmkdir -p ~/go/{bin,pkg,src}\n# echo \"Setting up GOPATH\"\n# echo \"export GOPATH=~/go\" &gt;&gt; ~/.profile &amp;&amp; source ~/.profile\n# echo \"Setting PATH to include golang binaries\"\n# echo \"export PATH='$PATH':/usr/local/go/bin:$GOPATH/bin\" &gt;&gt; ~/.profile &amp;&amp; source ~/.profile\n\n# Cleanup\nrm go\"${VERSION}\".${PLATFORM}.tar.gz\n</code></pre>"},{"location":"Golang/Update%20Golang%20Version/#first-time","title":"First Time","text":"<p>If you're installing for the first time, you can uncomment this blob from the above script:</p> <pre><code># echo \"Setting up GOPATH\"\n# echo \"export GOPATH=~/go\" &gt;&gt; ~/.profile &amp;&amp; source ~/.profile\n# echo \"Setting PATH to include golang binaries\"\n# echo \"export PATH='$PATH':/usr/local/go/bin:$GOPATH/bin\" &gt;&gt; ~/.profile &amp;&amp; source ~/.profile\n</code></pre> <p>Mofified it from a gist I found here.</p>"},{"location":"Golang/reading%20materials/","title":"Reading materials","text":"<ul> <li> <p>Use of &amp; and * in Golang</p> </li> <li> <p>Tutorial</p> </li> </ul>"},{"location":"Golang/reading%20materials/#concurrency-patterns","title":"Concurrency Patterns","text":""},{"location":"Golang/reading%20materials/#videos","title":"Videos","text":"<ul> <li>https://www.youtube.com/watch?v=QDDwwePbDtw</li> <li>https://medium.com/airasia-com-tech-blog/goroutines-waitgroups-writing-concurrent-programs-in-golang-888a1bb90053</li> </ul>"},{"location":"Golang/reading%20materials/#slides","title":"Slides","text":"<ul> <li>https://talks.golang.org/2012/concurrency.slide#19</li> <li>https://talks.golang.org/2013/advconc.slide#5</li> </ul>"},{"location":"Javascript/Async-Await-with-arrays/","title":"If need to work with async request on a array of elemets, a async for loop works better than foreach or map.","text":"<pre><code>for async(const element of elemenet){\n//doSomething\n}\n</code></pre>"},{"location":"Linux/Nginx/","title":"Nginx","text":""},{"location":"Linux/Nginx/#setup-nginx-in-a-ubuntu-server","title":"Setup Nginx in a ubuntu server","text":"<pre><code>sudo apt-get update\nsudo apt-get install nginx -y\nps auwx | grep nginx\n</code></pre>"},{"location":"Linux/Nginx/#add-a-http-server-to-deployment","title":"Add a http server to deployment","text":"<pre><code>cd /etc/nginx/sites-available\nsudo nano &lt;domain_name eg: imagery.rajivharlalka.me&gt;\n</code></pre> <p>Nginx config of http server</p> <pre><code>server {\nlisten 80;\nlisten [::]:80;\n\nserver_name imagery.rajivharlalka.me;\naccess_log /var/log/nginx/reverse-access.log;\nerror_log /var/log/nginx/reverse-error.log;\n\nlocation / {\nproxy_pass http://127.0.0.1:3000;\n}\n</code></pre> <ul> <li> <p>save and exit</p> </li> <li> <p>create symlink from sites-available to sites-enabled</p> </li> </ul> <pre><code>sudo ln -s /etc/nginx/sites-available/&lt;file-name&gt; /etc/nginx/sites-enabled/&lt;file-name&gt;\n</code></pre> <ul> <li>test nginx config and reload</li> </ul> <pre><code>sudo nginx -t &amp;&amp; sudo nginx -s reload\n</code></pre> <p>if everything ok then server should be start serving</p>"},{"location":"Linux/Nginx/#https-config-through-certbot","title":"HTTPS config through certbot","text":"<ul> <li>PreRequisites:   Add the name as a A name to dns cloud-providers first.</li> </ul> <p>Install certbot</p> <pre><code>sudo apt-get update\nsudo apt-get install certbot\nsudo apt-get install python3-certbot-nginx\n</code></pre> <p>Now Run to create certificates</p> <pre><code>sudo certbot --nginx -d &lt;domain-name&gt;\n</code></pre> <p>This should do everything.</p>"},{"location":"Linux/cli-functions/","title":"Cli functions","text":""},{"location":"Linux/cli-functions/#generate-password","title":"Generate Password","text":"<pre><code>function gen_pass() {\nlength=${1:?\"length must be specified\"}\nlength=$((length/2))\n\ndd if=/dev/random bs=1 count=${length} 2&gt;/dev/null | od -An -tx1 | tr -d ' \\t\\n' ; echo\n}\n</code></pre>"},{"location":"Linux/cli-functions/#matrix-like-output-in-shell","title":"Matrix like output in shell","text":"<pre><code>matrix() {\necho -e \"\\e[1;40m\" ; clear ; while :; do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(( $RANDOM % 72 )) ;sleep 0.05; done | awk '{ letters=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&amp;*()\"; c=$4;        letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf \"\\033[%s;%sH\\033[2;32m%s\",o,x,letter; printf \"\\033[%s;%sH\\033[1;37m%s\\033[0;0H\",a[x],x,letter;if (a[x] &gt;= $1) { a[x]=0; } }}'\n}\n</code></pre>"},{"location":"Linux/reading-materials/","title":"Reading materials","text":""},{"location":"Linux/reading-materials/#reading-materials-related-to-linux-and-linux-kernal","title":"Reading Materials related to Linux and Linux Kernal","text":"<ul> <li>https://iximiuz.com/en/posts/ssh-tunnels/</li> </ul>"},{"location":"Linux/wayland-screen-share/","title":"Screen share in Wayland DM","text":"<p>While screen sharing in wayland window manager, the window gets shared accurately but with full screen share it's just the cursor with black screen. I while using my arch linux, encountered this, and the only solution found on browsers was to <code>enable</code> this flag <code>#enable-webrtc-pipewire-capturer</code>.</p>"},{"location":"Linux/wayland-screen-share/#on-edge","title":"On edge","text":"<ul> <li>Go to <code>edge://flags/#enable-webrtc-pipewire-capturer</code> and enable it.</li> </ul>"},{"location":"Linux/wayland-screen-share/#on-chrome","title":"On chrome","text":"<ul> <li>Go to <code>chrome://flags/#enable-webrtc-pipewire-capturer</code> and enable it.</li> </ul>"},{"location":"Postgres/aggregate-functions/","title":"Aggregate Functions","text":""},{"location":"Postgres/aggregate-functions/#max","title":"max","text":"<p>Returns max value of the column</p> <p><pre><code>SELECT max(temp_lo) FROM weather;\n</code></pre> P.S.: Aggregate Functions dont work directly on a where clause. A sub query is required in that case.</p> <p>eg; <pre><code>-- WRONG\nSELECT city FROM weather WHERE temp_lo = max(temp_lo); -- Right\nSELECT city FROM weather WHERE temp_lo = (SELECT max(temp_lo) FROM weather);\n</code></pre></p>"},{"location":"Postgres/data-type/","title":"Data Types","text":""},{"location":"Postgres/data-type/#numeric-datatypes","title":"Numeric DataTypes","text":"name size small int 2 bytes integer 4 bytes bigint 8 bytes decimal variable numeric variable serail 4 bytes big serial 8 bytes <ul> <li>Syntax for numeric datatype: NUMERIC(precision,scale) where in 12.343 5 is precision and 3 is scale.</li> </ul>"},{"location":"Postgres/data-type/#serials","title":"Serials","text":"<pre><code>CREATE TABLE tablename (\ncolname SERIAL\n);\n-- is equivalent to specifying:\n\nCREATE SEQUENCE tablename_colname_seq AS integer;\nCREATE TABLE tablename (\ncolname integer NOT NULL DEFAULT nextval('tablename_colname_seq')\n);\nALTER SEQUENCE tablename_colname_seq OWNED BY tablename.colname;\n</code></pre> <p>P.S.: The sequence is marked Owned by the column so that it will be dropped off if the column or table is dropped</p>"},{"location":"Postgres/data-type/#character-data-type","title":"Character Data Type","text":"Name Description character varying(n), varchar(n) variable-length with limit character(n), char(n) fixed-length, blank padded text variable unlimited length"},{"location":"Postgres/data-type/#date-time-data-types","title":"Date Time Data Types","text":"Name Storage Size Description Low Value High Value Resolution timestamp [ (p) ] [ without time zone ] 8 bytes both date and time (no time zone) 4713 BC 294276 AD 1 microsecond timestamp [ (p) ] with time zone 8 bytes both date and time, with time zone 4713 BC 294276 AD 1 microsecond date 4 bytes date (no time of day) 4713 BC 5874897 AD 1 day time [ (p) ] [ without time zone ] 8 bytes time of day (no date) 00:00:00 24:00:00 1 microsecond time [ (p) ] with time zone 12 bytes time of day (no date), with time zone 00:00:00+1559 24:00:00-1559 1 microsecond interval [ fields ] [ (p) ] 16 bytes time interval -178000000 years 178000000 years 1 microsecond"},{"location":"Postgres/data-type/#boolean-data-type","title":"Boolean Data Type","text":"Name Size boolean 1 byte <pre><code>CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');\n</code></pre> <ul> <li>All normal comparator functions work the same way as they would do with other data types.</li> <li>two custom enums cannot be comparaed directly</li> </ul> <pre><code>SELECT person.name, holidays.num_weeks FROM person, holidays\nWHERE person.current_mood = holidays.happiness;\n-- to do this, below is the correct method\nSELECT person.name, holidays.num_weeks FROM person, holidays\nWHERE person.current_mood::text = holidays.happiness::text;\n</code></pre> <ul> <li>enums are case-sensitive</li> <li>occupies 4 bytes disk space</li> <li>all enums can be found from the <code>pg_enum</code> table.</li> </ul>"},{"location":"Postgres/data-type/#arrays","title":"Arrays","text":"<pre><code>CREATE TABLE array_table (\nname  text,\npay_by_quater integer[],\nschedule text[][]\n);\n</code></pre> <ul> <li>array elements can be selected with the <code>[]</code> notation</li> <li>multi dimension arrays can also be inserted.</li> <li>arrays are inserted like this -&gt; <code>{1,2,3,4}</code> , <code>{{1,2,3,4},{5,6,7,8}}</code></li> <li>array can also be referred as slices using the <code>[lower_bound: upper_bound]</code> reference.</li> <li><code>array_dims</code> function returns the dimesnion of array.</li> <li>arrays can be concatenated with <code>||</code> operator.</li> </ul>"},{"location":"Postgres/data-type/#domain","title":"Domain","text":"<p>Domains are extensios to underlying datatypes usually with some contraints premade for easy usage.</p> <pre><code>CREATE DOMAIN posint AS integer CHECK (VALUE&gt;0);\nCREATE TABLE mytable (id posint);\nINSERT INTO mytable VALUES (1); --works\nINSERT INTO mytable VALUES (-1); --fails\n</code></pre>"},{"location":"Postgres/escape-characters/","title":"Escape characters","text":"<p>there main escape characters in sql supported by postgresql are:</p> Escape Character Interpreation \\b backspace \\f formfeed \\n new line \\r carriage return \\t tab \\ backslash()"},{"location":"Postgres/functions-and-operators/","title":"Functions and operators","text":"<ol> <li><code>repeat(text,number)</code> - repeats the text number times.</li> <li>eg: repeat('hello',4) -&gt; hellohellohellohello</li> <li><code>num_nulls(arguments)</code> and <code>num_nonnulls(arguments)</code> -&gt; returns the number of nulls and non-null characters in the list of arguments.</li> <li>eg: num_nonnulls(1,2,3,NULL) -&gt; 3</li> <li>Date Time formatting template patterns</li> <li><code>overlaps</code> - returns if two intervl of time overlaps or not.</li> <li>eg: (start1, end1) OVERLAPS (start2, end2)      (start1, length1) OVERLAPS (start2, length2)      SELECT (DATE '2001-02-16', DATE '2001-12-21') OVERLAPS      (DATE '2001-10-30', DATE '2002-10-30');      Result: true</li> <li><code>gen_random_uuid()</code> -&gt; generates a random uuid version 4</li> <li>Array Functions</li> </ol>"},{"location":"Postgres/functions/","title":"Function creation","text":"<p>example:</p> <pre><code> CREATE FUNCTION concat_lower_or_upper(a text, b text, uppercase boolean DEFAULT false)\nRETURNS text\nAS\n$$\nSELECT CASE\nWHEN $3 THEN UPPER($1 || ' ' || $2)\nELSE LOWER($1 || ' ' || $2)\nEND;\n$$\nLANGUAGE SQL IMMUTABLE STRICT;\n</code></pre>"},{"location":"Postgres/functions/#function-calling","title":"Function Calling","text":"<pre><code>SELECT concat_lower_or_upper('postgres','rocks');\n</code></pre>"},{"location":"Postgres/functions/#some-special-fucntions","title":"Some Special Fucntions","text":""},{"location":"Postgres/functions/#serial","title":"SERIAL","text":"<pre><code>CREATE TABLE products(\nproduct_id SERIAL\nprice numeric\ndate TIMESTAMP\n)\n</code></pre> <p>SERIAL auto-increments a value based on previous value and make the colum not necessary.</p>"},{"location":"Postgres/functions/#generated-columns","title":"GENERATED COLUMNS","text":"<p>if a column depends on the value of another column, then it's vlaue can be filled using the <code>GENERATED COLUMNS</code> keyword.</p> <pre><code>CREATE TABLE people (\n...,\nheight_cm numeric,\nheight_in numeric GENERATED ALWAYS AS (height_cm / 2.54) STORED\n);\n</code></pre>"},{"location":"Postgres/joins/","title":"JOINS in SQL","text":"<pre><code>-- sample sql table to demonstrate joins\nCREATE TABLE one (num integer,name varchar);\n\nCREATE TABLE two (num integer,value varchar);\n\nINSERT INTO one(num,name)\nVALUES (1,'a'),\n(2,'b'),\n(3,'c'),\n(4,'d'),\n(5,'e');\n\n\nINSERT INTO two(num,value)\nVALUES (1,'xxx'),\n(3,'yyy'),\n(5,'zzz'),\n(6,'aaa');\n</code></pre>"},{"location":"Postgres/joins/#cross-join","title":"CROSS JOIN","text":"<p>Every row of table t1 is matched with every row of table t2.</p> <pre><code>postgres=# SELECT * FROM one CROSS JOIN two;\nnum | name | num | value\n-----+------+-----+-------\n1 | a    |   1 | xxx\n1 | a    |   3 | yyy\n1 | a    |   5 | zzz\n2 | b    |   1 | xxx\n2 | b    |   3 | yyy\n2 | b    |   5 | zzz\n3 | c    |   1 | xxx\n3 | c    |   3 | yyy\n3 | c    |   5 | zzz\n4 | d    |   1 | xxx\n4 | d    |   3 | yyy\n4 | d    |   5 | zzz\n5 | e    |   1 | xxx\n5 | e    |   3 | yyy\n5 | e    |   5 | zzz\n</code></pre>"},{"location":"Postgres/joins/#inner-join","title":"INNER JOIN","text":"<p>Columns which are present in both i.e. intersection</p> <pre><code>postgres=# SELECT * FROM one t1 INNER JOIN two t2 ON t1.num=t2.num;\nnum | name | num | value\n-----+------+-----+-------\n1 | a    |   1 | xxx\n3 | c    |   3 | yyy\n5 | e    |   5 | zzz\n</code></pre>"},{"location":"Postgres/joins/#outer-join","title":"OUTER JOIN","text":"<p>Missing columns are present based on type of join</p> <pre><code>postgres=# SELECT * FROM one t1 RIGHT OUTER JOIN two t2 ON t1.num=t2.num;\nnum | name | num | value\n-----+------+-----+-------\n1 | a    |   1 | xxx\n3 | c    |   3 | yyy\n5 | e    |   5 | zzz\n|      |   6 | aaa\n(4 rows)\n\npostgres=# SELECT * FROM one t1 LEFT JOIN two t2 ON t1.num=t2.num;\nnum | name | num | value\n-----+------+-----+-------\n1 | a    |   1 | xxx\n2 | b    |     |\n3 | c    |   3 | yyy\n4 | d    |     |\n5 | e    |   5 | zzz\n(5 rows)\n\npostgres=# SELECT * FROM one t1 LEFT OUTER JOIN two t2 ON t1.num=t2.num;\nnum | name | num | value\n-----+------+-----+-------\n1 | a    |   1 | xxx\n2 | b    |     |\n3 | c    |   3 | yyy\n4 | d    |     |\n5 | e    |   5 | zzz\n(5 rows)\n\npostgres=# SELECT * FROM one t1 FULL JOIN two t2 ON t1.num=t2.num;\nnum | name | num | value\n-----+------+-----+-------\n1 | a    |   1 | xxx\n2 | b    |     |\n3 | c    |   3 | yyy\n4 | d    |     |\n5 | e    |   5 | zzz\n|      |   6 | aaa\n</code></pre> <p>NOTE: - When the type of join is not specified , Inner join occurs - There isnt anything like left inner or left outer join.  - If Left/Right keyword is used, it means it's an outer join - The following three sntax are identical <pre><code>FROM a, b WHERE a.id = b.id AND b.val &gt; 5\n-- and:\n\nFROM a INNER JOIN b ON (a.id = b.id) WHERE b.val &gt; 5\n-- or perhaps even:\n\nFROM a NATURAL JOIN b WHERE b.val &gt; 5\n</code></pre></p>"},{"location":"Postgres/reading/","title":"Blogs","text":"<ul> <li>SQL style guide</li> <li>Database Migrations</li> <li>Postgres incident Report</li> <li>Postgres Plan Visualiser</li> </ul>"},{"location":"Postgres/timezone/","title":"Timezone","text":"<p>Choose a timezone from:</p> <pre><code>SELECT * FROM pg_timezone_names;\n</code></pre> <p>And set as below given example:</p> <pre><code>ALTER DATABASE postgres SET timezone TO 'Europe/Berlin';\n</code></pre> <p>Use your DB name in place of postgres in above statement.</p> <p>Alternatively,</p> <pre><code>SET TIME ZONE 'Asia/Kolkata'\n</code></pre> <p>The <code>pg_timezone_names</code> table contains the list of all timezone names and the <code>pg_timezone_abbrevs</code> table contains all the abbreviations of the timezones.</p>"},{"location":"Postgres/using-docker/","title":"Using docker","text":""},{"location":"Postgres/using-docker/#setup-postgres-locally-using-docker","title":"Setup postgres locally using docker","text":"<pre><code>docker run --name postgresql-container -p 5432:5432 -e POSTGRES_PASSWORD=test-db -d postgres\n</code></pre>"},{"location":"Postgres/using-docker/#docker-compose","title":"Docker-compose","text":"<pre><code>version: '3'\n\nservices:\n  postgres:\n    container_name: postgres\n    image: postgres:latest\n    volumes:\n      - dbdata:/var/lib/postgresql/data\n    ports:\n      - 5432:5432\n    environment:\n      POSTGRES_USER: \"root\"\nPOSTGRES_PASSWORD: \"password\"\nrestart: always\n\nvolumes:\n  dbdata:\n</code></pre>"},{"location":"Postgres/window-functions/","title":"Window Functions","text":"<p>Calculation of values(using functions such as avg) is someitme helpful using window functions.</p> <p>Window functions generally follow the <code>OVER</code> keyword. </p> <pre><code>SELECT name,class,roll,avg(marks) OVER (PARTITION by class) FROM CLASS_MARKS;\n</code></pre> <p>Here the students are partitoned by the class column and the aggregate function is used over it. This is more of like using the aggregate fucntions itslef, but helps as there is less computation involved.</p> <p>The OVER clause determines exactly how the rows of the query are split up for processing by the window function. The PARTITION BY clause within OVER divides the rows into groups, or partitions, that share the same values of the PARTITION BY expression(s). For each row, the window function is computed across the rows that fall into the same partition as the current row.  </p>"},{"location":"Product%20Management/reading-material/","title":"Reading material","text":""},{"location":"Product%20Management/reading-material/#reading-materials-related-to-product-management","title":"Reading Materials related to Product Management","text":"<ul> <li>https://universityofthreads.com/</li> </ul>"},{"location":"System%20Design/Dynamo/","title":"Dynamo","text":"<ol> <li>Distributed key-value store</li> <li>available</li> <li>scalable</li> <li>decentralised</li> <li>AP type of system under CAP theorem.</li> <li>designed for high availibility and partition tolerance at cost of strong consistency</li> <li>Uses Consistent Hashing to distribute data among nodes.</li> <li>Gossip protocol</li> <li>Hinted handoff</li> </ol>"},{"location":"System%20Design/Dynamo/#data-partitioning","title":"Data Partitioning","text":""},{"location":"System%20Design/Dynamo/#problems-with-normal-hashing","title":"Problems with normal hashing","text":"<ul> <li>finding correct node where data is present.</li> <li>resolving in consistency upon addign removing nodes.</li> </ul> <p>Solution: Consistent Hashing.</p> <p>Steps to store data:</p> <ul> <li>Apply MD5 hashing algo on key.</li> <li>check which range the hash lies.</li> <li> <p>insert data in the particular node.</p> </li> <li> <p>Uses concept of virtual node.   Each node is furthur subdivided into smaller sub nodes for duplication of data.</p> </li> </ul>"},{"location":"System%20Design/Dynamo/#wip","title":"[WIP]","text":""},{"location":"System%20Design/Reading%20and%20watching/","title":"Reading and watching","text":"<ul> <li> <p>System Design Primer</p> </li> <li> <p>High Scalability All Time Favs</p> </li> <li> <p>Company Architechture</p> </li> <li> <p>How does Disney Hotstar capture 5 Billion Emojis during a tournament?</p> </li> </ul>"},{"location":"Typography/font-properties/","title":"Font properties","text":""},{"location":"Typography/font-properties/#properties-of-fonts","title":"Properties of fonts","text":"<ul> <li>x-height - A better x-height is better for long time reading.</li> <li>weight - defines thickness of characters.</li> </ul>"}]}